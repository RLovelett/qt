############################################################################
#	$Id$ 
#
#	A main configurations for eSOL eT-Kernel eBinder/RVCT
#		Software Research Associates, Inc.
#
############################################################################

############################################################################
# Substitution of site specific include directories and library directories

EBINDER_QTDIR	=	$$CYGPATH_EBINDERDIR/projects/$$EBINDER_PRJ/build

RVCT_LIBDIR	=	$$EBINDER_QTDIR/rvctlib

SHARED_LIBDIR	=	$$EBINDER_QTDIR/$$BUILDTYPE/pic/lib
STATIC_LIBDIR	=	$$EBINDER_QTDIR/$$BUILDTYPE/lib

EBINDER_PARTS_DIR	=	$$EBINDER_QTDIR/parts
EBINDER_RVCT_INC	=	$$EBINDER_PARTS_DIR/include_rvct
EBINDER_INC		=	$$EBINDER_PARTS_DIR/include
EBINDER_INC_EXTENSION	=	$$EBINDER_INC/extension
LIBPOSIX_NETDB_INC	=	\
	$$EBINDER_PARTS_DIR/lib/libposix/src/netdb/include
PRCONNECT_DIR		=	$$EBINDER_PARTS_DIR/prconnect_pro
PRCONNECT_INC		=	$$PRCONNECT_DIR/h
PRCONNECT_DNS_INC	=	$$PRCONNECT_DIR/dnsclnt/include
EBINDER_CONFIG_INC	=	$$EBINDER_PARTS_DIR/config
RVCT_SYSINC		=	$$CYGPATH_RVCTINCDIR

INCDIRS_IN_ORDER	+=	-J\"$$EBINDER_RVCT_INC\"
INCDIRS_IN_ORDER	+=	-J\"$$EBINDER_INC\"
INCDIRS_IN_ORDER	+=	-J\"$$EBINDER_INC_EXTENSION\"
INCDIRS_IN_ORDER	+=	-J\"$$LIBPOSIX_NETDB_INC\"
INCDIRS_IN_ORDER	+=	-J\"$$PRCONNECT_INC\"
INCDIRS_IN_ORDER	+=	-J\"$$PRCONNECT_DNS_INC\"
INCDIRS_IN_ORDER	+=	-J\"$$EBINDER_CONFIG_INC\"
INCDIRS_IN_ORDER	+=	-J\"$$RVCT_SYSINC\"

SRCTOPDIR	=	$$replace(QMAKE_QMAKE, /bin/qmake, "")
TOPQTLIBDIR	=	$$SRCTOPDIR/lib
TOPQTBINDIR	=	$$SRCTOPDIR/bin
TOPQTDEMOSDIR	=	$$SRCTOPDIR/demos
UTILSDIR	=	$$system(if test -d $$SRCTOPDIR/../utils; then echo $$SRCTOPDIR/../utils; else echo $$TOPQTBINDIR; fi)

############################################################################
# Tune parameters file inclusion:

# For code generation time and linkage time optimizations
exists(./rvct-optimize.conf) {
    include(./rvct-optimize.conf)
}

# Warning suppression both compilation time and linkage time
exists(./rvct-warn-suppress.conf) {
    include(./rvct-warn-suppress.conf)
}

############################################################################
# Toolchain common configurations:

# Specifying '--cpu MPCore' implies '--fpu vfpv2'
ARCH_FLAGS	=	--cpu MPCore

############################################################################
# C/C++ Compiler configurations:

######################################
# C preprosessor macros:

# A compiler identifier for Qt
# Note:
#	IMO, This should be merged into __CC_ARM
QMAKE_CPPFLAGS	+=	__ARMCC__

# An architecture identifier for Qt
# Note:
#	IMO, like above, this also should be done by checking __CC_ARM
#	and __TARGET_ARCH_ARM
QMAKE_CPPFLAGS	+=	__ARM_ARCH_6__

# eT-Kernel POSIX API specific definitions:
QMAKE_CPPFLAGS	+=	__POSIX__
QMAKE_CPPFLAGS	+=	_REENTRANT
QMAKE_CPPFLAGS	+=	_REENT

# Qt/eT-Kernel porting specific definietions:
# Note:
#	XXXXX FIXME: Need more proper name.
QMAKE_CPPFLAGS	+=	__TKSE__

# shared object (lib and app)
shared {
    QMAKE_CPPFLAGS	+=	__PIC__
    target_lib {
        QMAKE_CPPFLAGS	+=	QT_MAKEDLL
    }
    target_app {
        QMAKE_CPPFLAGS	+=	QT_DLL
    }
}
static {
    QMAKE_CPPFLAGS	+=	QT_NODLL
}

DEFINES		+=	$$QMAKE_CPPFLAGS

######################################
# C compiler:

QMAKE_CC	=	armcc

QMAKE_CFLAGS	=	 --licretry
QMAKE_CFLAGS	=	$$ARCH_FLAGS

use_interwork {
    QMAKE_CFLAGS	+=	--apcs /interwork
} else {
    QMAKE_CFLAGS	+=	--apcs /interwork
}

shared {
    QMAKE_CFLAGS	+=	 --apcs /fpic
}
QMAKE_CFLAGS	+=	 --no_hide_all
QMAKE_CFLAGS	+=	 -A--no_hide_all

debug {
    QMAKE_CFLAGS	+=	--debug
    QMAKE_CFLAGS	+=	--dwarf2
    !isEmpty(RVCT_C_OPTFLAGS_DEBUG) {
        QMAKE_CFLAGS	+=	$$RVCT_C_OPTFLAGS_DEBUG
    } else {
        QMAKE_CFLAGS	+=	-O1
    }
}
release {
    !isEmpty(RVCT_C_OPTFLAGS_RELEASE) {
        QMAKE_CFLAGS	+=	$$RVCT_C_OPTFLAGS_RELEASE
    } else {
        QMAKE_CFLAGS	+=	-O3
        QMAKE_CFLAGS	+=	-Otime
    }
}

QMAKE_CFLAGS	+=	--exceptions
QMAKE_CFLAGS	+=	--restrict

QMAKE_CFLAGS	+=	$$INCDIRS_IN_ORDER

QMAKE_CFLAGS_DEPS	=	-M

!contains(CONFIG, warn_on) {
    QMAKE_CFLAGS	+=	-W
}

######################################
# C++ compiler
QMAKE_CXX		=	$$QMAKE_CC

QMAKE_CXXFLAGS		=	--cpp
QMAKE_CXXFLAGS		+=	--using_std
QMAKE_CXXFLAGS		+=	--no_parse_templates

QMAKE_CXXFLAGS		+=	$$QMAKE_CFLAGS

######################################
# Warning suppression:

QMAKE_CFLAGS	+=	--diag_style=gnu
QMAKE_CXXFLAGS	+=	--diag_style=gnu

!isEmpty(RVCT_C_WARN_SUPPRESS) {
    QMAKE_CFLAGS	+=	--diag_suppress=$$RVCT_C_WARN_SUPPRESS
}
!isEmpty(RVCT_CXX_WARN_SUPPRESS) {
    QMAKE_CXXFLAGS	+=	--diag_suppress=$$RVCT_CXX_WARN_SUPPRESS
}


############################################################################
# Linkage configurations:

QMAKE_LINK		= armlink

QMAKE_LFLAGS	=	--licretry
QMAKE_LFLAGS	+=	$$ARCH_FLAGS
QMAKE_LFLAGS	+=	--diag_style=gnu

!isEmpty(RVCT_LINK_WARN_SUPPRESS) {
    QMAKE_LFLAGS	+=	--diag_suppress=$$RVCT_LINK_WARN_SUPPRESS
}

QMAKE_LFLAGS	+=	--sysv
target_app {
    QMAKE_LFLAGS	+=	--elf
}

shared {
    target_lib {
        QMAKE_LFLAGS	+=	--shared
        QMAKE_LFLAGS	+=	--fpic
        QMAKE_LFLAGS	+=	--keep="\"*(.ARM.exidx)\""
        QMAKE_LFLAGS_SONAME	= --soname=
    }
    QMAKE_LFLAGS	+=	--pt_arm_exidx
    QMAKE_LFLAGS	+=	--force_so_throw
}

debug {
    QMAKE_LFLAGS	+=	--debug
    shared {
        QMAKE_LFLAGS	+=	--dynamic_debug
    }
    !isEmpty(RVCT_LINK_OPTFLAGS_DEBUG) {
        QMAKE_LFLAGS	+=	$$RVCT_LINK_OPTFLAGS_DEBUG
    } else {
        QMAKE_LFLAGS	+=	--no_remove
    }
}
release {
    !isEmpty(RVCT_LINK_OPTFLAGS_RELEASE) {
        QMAKE_LFLAGS	+=	$$RVCT_LINK_OPTFLAGS_RELEASE
    } else {
        QMAKE_LFLAGS	+=	--no_debug
    }
}

QMAKE_LFLAGS	+=	--export_all
QMAKE_LFLAGS	+=	--no_scanlib
QMAKE_LFLAGS	+=	--map
QMAKE_LFLAGS	+=	--list $(TARGET).map
QMAKE_LFLAGS	+=	--info=sizes,merge

target_lib|target_app {
    # Entry points
    target_app {
        QMAKE_LFLAGS	+=	--entry=start
    }
    QMAKE_LFLAGS	+=	--init=_init
    QMAKE_LFLAGS	+=	--fini=_fini

    QMAKE_LFLAGS	+=	--edit \
	$$EBINDER_PARTS_DIR/make/hide_crti_rvct.txt
    target_lib {
        QMAKE_LFLAGS	+=	--edit \
	    $$EBINDER_PARTS_DIR/make/library_rvct4_0_rvct_str.txt
    }
    target_app {
        QMAKE_LFLAGS	+=	--edit \
	    $$EBINDER_PARTS_DIR/make/process_rvct4_0_rvct_str.txt
    }

    QMAKE_LFLAGS	+=	--userlibpath $$RVCT_LIBDIR

    # objs & libs

    # objs
    QMAKE_LIBS	=	crtrvctpatch.o	# RVCT startup patch
    shared {
        QMAKE_LFLAGS	+=	--userlibpath $$SHARED_LIBDIR

        target_lib {
            QMAKE_LIBS	+=	crti_dso_pic.o	# RVCT PIC shared lib
        }
        target_app {
            QMAKE_LIBS	+=	crti_prc_pic.o	# RVCT PIC shared exe
            QMAKE_LIBS	+=	crt0.o
            QMAKE_LIBS	+=	crtsvc.o
            QMAKE_LIBS	+=	crtrvct.o
            QMAKE_LIBS	+=	crttkse.o
            QMAKE_LIBS	+=	crt1s.o
            QMAKE_LIBS	+=	crtn.o
            QMAKE_LIBS	+=	solib.o
            QMAKE_LIBS	+=	mutex_pic.o
        }
        QMAKE_LIBS	+=	hide_syms_rvct.o
    }
    static {
        QMAKE_LFLAGS	+=	--userlibpath $$STATIC_LIBDIR

        target_app {
            QMAKE_LIBS	+=	crti_prc.o	# RVCT exe
            QMAKE_LIBS	+=	crt0.o
            QMAKE_LIBS	+=	crtsvc.o
            QMAKE_LIBS	+=	crtrvct.o
            QMAKE_LIBS	+=	crttkse.o
            QMAKE_LIBS	+=	crt1s.o
            QMAKE_LIBS	+=	crtn.o
            QMAKE_LIBS	+=	solib.o
            QMAKE_LIBS	+=	mutex.o
        }
    }

    # libs
    QMAKE_LIBS	+=	-lh
    QMAKE_LIBS	+=	-lf
    QMAKE_LIBS	+=	-lm

    BASELIBS	=	-lcrvct@@d
    BASELIBS	+=	-lposix@@d
    BASELIBS	+=	-lg@@d
    BASELIBS	+=	-ltcstr@@d
    BASELIBS	+=	-ltkse@@d
    BASELIBS	+=	-ltksesvc@@d
    BASELIBS	+=	-lsegment@@d
    BASELIBS	+=	-lbarrier@@d
    shared {
        BASELIBS	+=	libdl@@d.so
    }
    debug {
        DBGSFX=.d
    } else {
        DBGSFX=
    }
    QMAKE_LIBS	+=	$$system(echo $$BASELIBS | sed "s:@@d:$$DBGSFX:g")

    QMAKE_LIBS	+=	-lc
    QMAKE_LIBS	+=	-lcpp
    QMAKE_LIBS	+=	-lcpprt
}


############################################################################
# Misc. commands:

QMAKE_AR		= armar --create
QMAKE_OBJCOPY           = objcopy
QMAKE_RANLIB		=

QMAKE_CLEAN		+=	.obj .moc .pch .rcc .uic pkgconfig
touch_project.commands	=	sh -c \'_l=`ls *.pr[iof]`; if test ! -z \"\$\${_l}\"; then for i in \$\${_l}; do if test -f \$\${i}; then touch \$\${i}; fi; done; fi\'
QMAKE_EXTRA_TARGETS	+=	touch_project
CLEAN_DEPS		+=	touch_project

target_lib|target_app {
    QMAKE_CLEAN		+=	$(TARGET) $(TARGET).map
    target_app {
        QMAKE_CLEAN	+=	.depSoLibs ./hfs-install.sh
    }
}
QMAKE_TAR		= tar -cf
QMAKE_GZIP		= gzip -9f

QMAKE_COPY		= cp -p -f
QMAKE_MOVE		= mv -f
QMAKE_DEL_FILE		= rm -rf
QMAKE_DEL_DIR		= rm -rf
QMAKE_CHK_DIR_EXISTS	= test -d
QMAKE_MKDIR		= mkdir -p

QMAKE_LEX	=	flex
QMAKE_LEXFLAGS	=
QMAKE_YACC	=	yacc
QMAKE_YACCFLAGS	=	-d

############################################################################
# Final tweaks:

exists(./tweaks-post-main.conf) {
    include(./tweaks-post-main.conf)
}

############################################################################
# Generate eBinder HFS installer

target_lib|target_app {
    exists(./ebinder-hfs-installer.conf) {
        include(./ebinder-hfs-installer.conf)
    }
}

############################################################################
# Extra cleaning target

exists(./.svn) {
    veryclean.commands	=	svn st | egrep '\'^\\?\'' | grep -v Makefile | egrep -v '\'.*bin/qmake\'' | egrep -v '\'\\.qmake\\.cache\'' | grep -v site.conf | xargs rm -rf
    veryclean.depends	= 	clean
    QMAKE_EXTRA_TARGETS	+=	veryclean
}
